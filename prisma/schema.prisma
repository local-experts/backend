generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  imageHash     String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  isAnonymous   Boolean?
  isContractor  Boolean   @default(false)

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]
  Project          Project[]
  Contractor       Contractor[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

enum AvailableStatus {
  planung
  abgesagt
  in_arbeit     @map("in arbeit")
  abgeschlossen
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  status      AvailableStatus
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  timeline    TimelineItem[]
  contractors Contractor[]    @relation("ContractorProjects")
  attachments Attachment[]

  @@map("project")
}

model TimelineItem {
  id           Int             @id @default(autoincrement())
  project      Project         @relation(fields: [projectId], references: [id])
  projectId    Int
  title        String
  category     String?
  status       AvailableStatus
  date         DateTime
  description  String?
  assignedTo   Contractor?     @relation(fields: [assignedToId], references: [id])
  assignedToId Int?

  createdAt DateTime
  updatedAt DateTime
}

model Contractor {
  id           Int            @id @default(autoincrement())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName  String
  address      String?
  phone        String?
  email        String?
  createdAt    DateTime
  updatedAt    DateTime
  projects     Project[]      @relation("ContractorProjects")
  TimelineItem TimelineItem[]

  @@map("contractor")
}

model Attachment {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  url         String
  filename    String
  uploadedAt  DateTime @default(now())
  description String?
  hash        String?
}
